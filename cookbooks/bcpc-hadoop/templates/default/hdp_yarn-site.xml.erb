<?xml version="1.0"?>
<!--
################################################
#
#              Generated by Chef
#
################################################
-->
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<configuration>
  <% if @rm_hosts.length >= 2 %>
  <property>
    <name>yarn.resourcemanager.cluster-id</name>
    <value><%="#{node.chef_environment}"%></value>
  </property>

  <property>
    <name>yarn.resourcemanager.ha.enabled</name>
    <value>true</value>
  </property>

  <property>
    <name>yarn.resourcemanager.ha.rm-ids</name>
    <value><%=@rm_hosts.map{ |s| "rm#{node.chef_environment}#{s[:node_number]}" }.join(",") %></value>
  </property>

  <% @rm_hosts.each do |h| %>
  <property>
    <name>yarn.resourcemanager.hostname.rm<%= "#{node.chef_environment}#{h[:node_number]}" %></name>
    <value><%=float_host(h[:hostname]) %></value>
  </property>

  <property>
    <name>yarn.resourcemanager.resource-tracker.address.rm<%= "#{node.chef_environment}#{h[:node_number]}" %></name>
    <value><%="#{float_host(h[:hostname])}:8031"%></value>
  </property>

  <property>
    <name>yarn.resourcemanager.address.rm<%= "#{node.chef_environment}#{h[:node_number]}" %></name>
    <value><%=float_host(h[:hostname])%>:<%=node["bcpc"]["hadoop"]["yarn"]["resourcemanager"]["port"]%></value>
  </property>

  <property>
    <name>yarn.resourcemanager.scheduler.address.rm<%= "#{node.chef_environment}#{h[:node_number]}" %></name>
    <value><%="#{float_host(h[:hostname])}:8030"%></value>
  </property>

  <property>
    <name>yarn.resourcemanager.admin.address.rm<%= "#{node.chef_environment}#{h[:node_number]}" %></name>
    <value><%="#{float_host(h[:hostname])}:8033"%></value>
  </property>

  <property>
    <name>yarn.resourcemanager.webapp.address.rm<%= "#{node.chef_environment}#{h[:node_number]}" %></name>
    <value><%="#{float_host(h[:hostname])}:8088"%></value>
  </property>

  <property>
    <name>yarn.resourcemanager.webapp.https.address.rm<%= "#{node.chef_environment}#{h[:node_number]}" %></name>
    <value><%="#{float_host(h[:hostname])}:8090"%></value>
  </property>
  <% end # @rm_hosts.each do |h|%>

  <property>
    <name>yarn.resourcemanager.recovery.enabled</name>
    <value>true</value>
  </property>

  <property>
    <name>yarn.resourcemanager.store.class</name>
    <value>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore</value>
  </property>

  <property>
    <name>yarn.resourcemanager.zk-address</name>
    <value><%= @zk_hosts.map{ |s| float_host(s[:hostname]) + ":#{node[:bcpc][:hadoop][:zookeeper][:port]}" }.join(",") %></value>
  </property>

  <property>
    <name>yarn.client.failover-proxy-provider</name>
    <value>org.apache.hadoop.yarn.client.ConfiguredRMFailoverProxyProvider</value>
  </property>
  <% else # if @rm_hosts.length >= 2 %>

  <property>
    <name>yarn.resourcemanager.resource-tracker.address</name>
    <value><%="#{float_host(@rm_hosts.first[:hostname])}:8031" if not @rm_hosts.empty?%></value>
  </property>

  <property>
    <name>yarn.resourcemanager.address</name>
    <value><%="#{float_host(@rm_hosts.first[:hostname])}:#{node["bcpc"]["hadoop"]["yarn"]["resourcemanager"]["port"]}" if not @rm_hosts.empty?%></value>
  </property>

  <property>
    <name>yarn.resourcemanager.scheduler.address</name>
    <value><%="#{float_host(@rm_hosts.first[:hostname])}:8030" if not @rm_hosts.empty?%></value>
  </property>

  <property>
    <name>yarn.resourcemanager.admin.address</name>
    <value><%="#{float_host(@rm_hosts.first[:hostname])}:8033" if not @rm_hosts.empty?%></value>
  </property>

  <property>
    <name>yarn.resourcemanager.webapp.address</name>
    <value><%="#{float_host(@rm_hosts.first[:hostname])}:8088" if not @rm_hosts.empty?%></value>
  </property>

  <property>
    <name>yarn.resourcemanager.webapp.https.address</name>
    <value><%="#{float_host(@rm_hosts.first[:hostname])}:8090" if not @rm_hosts.empty?%></value>
  </property>
  <% end # if @rm_hosts.length >= 2 %>

  <% if node.run_list.expand(node.chef_environment).recipes.include?("bcpc-hadoop::datanode") %>
  <!-- Group nodemanager restart option with nodemanager port specification since a stable port is needed for a successful restart -->
  <property>
    <name>yarn.nodemanager.recovery.enabled</name>
    <value>true</value>
  </property>

  <property>
    <name>yarn.nodemanager.address</name>
    <value><%=float_host(node[:hostname])%>:<%=node["bcpc"]["hadoop"]["yarn"]["nodemanager"]["port"]%></value>
  </property>

  <% if node.run_list.expand(node.chef_environment).recipes.include?("bcpc-hadoop::datanode") %>
  <!-- Group nodemanager restart option with nodemanager port specification
       since a stable port is needed for a successful restart -->
  <property>
    <name>yarn.nodemanager.recovery.enabled</name>
    <value>true</value>
  </property>

  <property>
    <name>yarn.nodemanager.address</name>
    <value><%=float_host(node[:hostname])%>:<%=node["bcpc"]["hadoop"]["yarn"]["nodemanager"]["port"]%></value>
  </property>

  <property>
    <name>yarn.nodemanager.hostname</name>
    <value><%= float_host(node[:hostname]) %></value>
  </property>

  <property>
    <name>yarn.nodemanager.hostname</name>
    <value><%= float_host(node[:hostname]) %></value>
  </property>

  <% end # if node.run_list.expand(node.chef_environment).recipes.include?("bcpc-hadoop::datanode") %>

  <property>
    <name>yarn.application.classpath</name>
    <value>/etc/hadoop/conf,/usr/hdp/current/hadoop-client/*,/usr/hdp/current/hadoop-client/lib/*,/usr/hdp/current/hadoop-hdfs-client/*,/usr/hdp/current/hadoop-hdfs-client/lib/*,/usr/hdp/current/hadoop-yarn-client/*,/usr/hdp/current/hadoop-yarn-client/lib/*</value>
  </property>

  <property>
    <name>yarn.nodemanager.aux-services</name>
    <value><%= node[:bcpc][:hadoop][:yarn][:aux_services].keys.join(',') %></value>
  </property>

  <% node[:bcpc][:hadoop][:yarn][:aux_services].each_pair do |k,cls_v| %>
  <property>
    <name>yarn.nodemanager.aux-services.<%= k %>.class</name>
    <value><%= cls_v['class'] %></value>
  </property>
  <% end # end loop over node[:bcpc][:hadoop][:yarn][:aux_services] %>

  <property>
    <name>yarn.nodemanager.local-dirs</name>
    <value><%=@mounts.map{ |d| "file:///disk/#{d}/yarn/local" }.join(",")%></value>
  </property>

  <property>
    <name>yarn.nodemanager.log-dirs</name>
    <value><%=@mounts.map{ |d| "/disk/#{d}/yarn/logs" }.join(",")%></value>
  </property>

  <property>
    <name>yarn.nodemanager.remote-app-log-dir</name>
    <value>/var/log/hadoop-yarn/apps</value>
    <description>Where to aggregate logs on HDFS</description>
  </property>

  <property>
    <name>yarn.log-aggregation-enable</name>
    <value>true</value>
  </property>

  <property>
    <name>yarn.log-aggregation.retain-seconds</name>
    <value><%= node["bcpc"]["hadoop"]["yarn"]["log-aggregation_retain-seconds"] %></value>
  </property>

  <property>
    <name>yarn.nodemanager.log-aggregation.roll-monitoring-interval-seconds</name>
    <value>1800</value>
  </property>

  <property>
    <name>yarn.nodemanager.log-aggregation.compression-type</name>
    <value>gz</value>
  </property>

  <property>
    <name>yarn.nodemanager.container-executor.class</name>
    <value>org.apache.hadoop.yarn.server.nodemanager.LinuxContainerExecutor</value>
  </property>

  <property>
    <name>yarn.resourcemanager.nodes.exclude-path</name>
    <value>/etc/hadoop/conf/yarn.exclude</value>
  </property>

  <property>
    <name>yarn.nodemanager.linux-container-executor.group</name>
    <value>yarn</value>
  </property>

  <property>
    <name>yarn.nodemanager.linux-container-executor.nonsecure-mode.limit-users</name>
    <value>false</value>
  </property>

  <property>
    <name>yarn.nodemanager.linux-container-executor.resources-handler.class</name>
    <value>org.apache.hadoop.yarn.server.nodemanager.util.CgroupsLCEResourcesHandler</value>
  </property>

  <property>
    <name>yarn.nodemanager.linux-container-executor.group</name>
    <value>yarn</value>
  </property>

  <property>
    <name>yarn.nodemanager.linux-container-executor.cgroups.mount-path</name>
    <value>/sys/fs/cgroup/</value>
  </property>

  <property>
    <name>yarn.nodemanager.resource.memory-mb</name>
    <value><%= node['bcpc']['hadoop']['yarn']['nodemanager']['avail_memory']['size'] or
               [1024, (node['memory']['total'].to_i * node['bcpc']['hadoop']['yarn']['nodemanager']['avail_memory']['ratio']/1024).floor].max %></value>
  </property>

  <property>
    <name>yarn.scheduler.minimum-allocation-mb</name>
    <value><%= node['bcpc']['hadoop']['yarn']['scheduler']['minimum-allocation-mb'] %></value>
  </property>

  <property>
    <name>yarn.nodemanager.resource.cpu-vcores</name>
    <value><%= node['bcpc']['hadoop']['yarn']['nodemanager']['avail_vcpu']['count'] or
               [1, (node['cpu']['total'] * node['bcpc']['hadoop']['yarn']['nodemanager']['avail_vcpu']['ratio']).floor].max %></value>
  </property>

  <property>
    <name>resource.percentage-physical-cpu-limit</name>
    <value><%= (node['bcpc']['hadoop']['yarn']['nodemanager']['avail_vcpu']['count'] ? \
                 node['bcpc']['hadoop']['yarn']['nodemanager']['avail_vcpu']['count']/node['cpu']['total'] :
                 node['bcpc']['hadoop']['yarn']['nodemanager']['avail_vcpu']['ratio'] * 100).floor %></value>
  </property>

  <property>
    <name>yarn.resourcemanager.scheduler.class</name>
    <value><%= node['bcpc']['hadoop']['yarn']['scheduler']["class"] %></value>
  </property>

  <% if node.run_list.expand(node.chef_environment).recipes.include?("bcpc-hadoop::datanode")  %>
  <property>
    <name>yarn.nodemanager.bind-host</name>
    <value><%=node[:bcpc][:floating][:ip] %></value>
  </property>
  <% end # if node.run_list.expand(node.chef_environment).recipes.include?("bcpc-hadoop::datanode") %>
  <% if node.run_list.expand(node.chef_environment).recipes.include?("bcpc-hadoop::resource_manager")  %>
  <property>
    <name>yarn.resourcemanager.bind-host</name>
    <value><%=node[:bcpc][:floating][:ip] %></value>
  </property>
  <% end # if node.run_list.expand(node.chef_environment).recipes.include?("bcpc-hadoop::resource_manager") %>
  <% if node[:bcpc][:hadoop][:kerberos][:enable] == true then %>
  <property>
    <name>yarn.resourcemanager.principal</name>
    <value><%= node[:bcpc][:hadoop][:kerberos][:data][:resourcemanager][:principal] %>/<%=node[:bcpc][:hadoop][:kerberos][:data][:resourcemanager][:princhost] == "_HOST" ? "_HOST" : node[:bcpc][:hadoop][:kerberos][:data][:resourcemanager][:princhost]%>@<%= node[:bcpc][:hadoop][:kerberos][:realm] %></value>
  </property>

  <property>
    <name>yarn.resourcemanager.keytab</name>
    <value><%= node[:bcpc][:hadoop][:kerberos][:keytab][:dir] %>/<%= node[:bcpc][:hadoop][:kerberos][:data][:resourcemanager][:keytab] %></value>
  </property>

  <% if node.run_list.expand(node.chef_environment).recipes.include?("bcpc-hadoop::datanode") %>
  <property>
    <name>yarn.nodemanager.principal</name>
    <value><%= node[:bcpc][:hadoop][:kerberos][:data][:nodemanager][:principal] %>/<%= node[:bcpc][:hadoop][:kerberos][:data][:nodemanager][:princhost] == "_HOST" ? float_host(node[:fqdn]) : node[:bcpc][:hadoop][:kerberos][:data][:nodemanager][:princhost] %>@<%= node[:bcpc][:hadoop][:kerberos][:realm] %></value>
  </property>
  <% else # if node.run_list.expand(node.chef_environment).recipes.include?("bcpc-hadoop::datanode") %>
  <property>
    <name>yarn.nodemanager.principal</name>
    <value><%= node[:bcpc][:hadoop][:kerberos][:data][:nodemanager][:principal] %>/<%=node[:bcpc][:hadoop][:kerberos][:data][:nodemanager][:princhost] == "_HOST" ? "_HOST" : node[:bcpc][:hadoop][:kerberos][:data][:nodemanager][:princhost]%>@<%= node[:bcpc][:hadoop][:kerberos][:realm] %></value>
  </property>
  <% end # if node.run_list.expand(node.chef_environment).recipes.include?("bcpc-hadoop::datanode") %>
  <property>
    <name>yarn.nodemanager.keytab</name>
    <value><%= node[:bcpc][:hadoop][:kerberos][:keytab][:dir] %>/<%= node[:bcpc][:hadoop][:kerberos][:data][:nodemanager][:keytab] %></value>
  </property>

  <property>
    <name>yarn.resourcemanager.webapp.delegation-token-auth-filter.enabled</name>
    <value>true</value>
  </property>
  <% end # if node[:bcpc][:hadoop][:kerberos][:enable] == true then %>
</configuration>
